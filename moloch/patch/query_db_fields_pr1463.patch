diff --git a/tests/general.t b/tests/general.t
index c9206ead..d7a991ab 100644
--- a/tests/general.t
+++ b/tests/general.t
@@ -1,4 +1,4 @@
-use Test::More tests => 649;
+use Test::More tests => 659;
 use Cwd;
 use URI::Escape;
 use MolochTest;
@@ -421,3 +421,11 @@ if (0) {
 
 # communityId
     countTest(1, "date=-1&expression=" . uri_escape("(file=$pwd/socks-http-pass.pcap||file=$pwd/gre-sample.pcap)&&communityId=\"1:eMRxQSkNuVRbgi0elxmjkFvRujg=\""));
+
+# query DB field names by using db: prefix (#1461)
+    errTest("date=-1&expression=" . uri_escape("db:noSuchField=10.0.0.2"));
+    errTest("date=-1&expression=" . uri_escape("srcIp=10.0.0.2"));
+    countTest(1, "date=-1&expression=" . uri_escape("file=$pwd/bt-udp.pcap&&db:srcIp=10.0.0.2"));
+    countTest(3, "date=-1&expression=" . uri_escape("file=$pwd/bt-udp.pcap&&db:srcIp>=10.0.0.2"));
+    countTest(1, "date=-1&expression=" . uri_escape("(file=$pwd/dns-flags0110.pcap||file=$pwd/dns-dnskey.pcap)&&db:dstOui=Juniper*"));
+    countTest(24, "date=-1&expression=" . uri_escape("file=$pwd/wireshark-esp.pcap&&db:protocol=esp"));
diff --git a/viewer/molochparser.jison b/viewer/molochparser.jison
index 98038d81..56fa4bfa 100644
--- a/viewer/molochparser.jison
+++ b/viewer/molochparser.jison
@@ -86,6 +86,26 @@ e
 var    util           = require('util');
 var    moment         = require('moment');
 
+/* Given a field name, if prefixed with 'db:' return dbFieldsMap entry (i.e., looked up according to
+ * the Elasticsearch field name); otherwise return fieldsMap entry (see #1461)
+ */
+function getFieldInfo(yy, field)
+{
+  var info = null;
+
+  if (field.startsWith('db:')) {
+    var dbField = field.substring(3);
+    if (yy.dbFieldsMap[dbField]) {
+      info = yy.dbFieldsMap[dbField];
+    }
+  } else if (yy.fieldsMap[field]) {
+    info = yy.fieldsMap[field];
+  }
+
+  // console.log('getFieldInfo', field, info);
+  return info;
+}
+
 /* Build a list of all the field infos for ip field types.
  * Can specify if a port field needs to be available for the type or not
  */
@@ -132,7 +152,7 @@ function getIpInfoList(yy, needPort)
  * Arrays of all of the above
  */
 function parseIpPort(yy, field, ipPortStr) {
-  var dbField = yy.fieldsMap[field].dbField;
+  var dbField = getFieldInfo(yy, field).dbField;
 
   // Have just a single Ip, create obj for it
   function singleIp(exp, dbField, ip, port) {
@@ -155,9 +175,10 @@ function parseIpPort(yy, field, ipPortStr) {
     }
 
     if (port !== -1) {
-      if (yy.fieldsMap[exp].portField) {
+      var expInfo = getFieldInfo(yy, exp);
+      if (expInfo.portField) {
         obj = {bool: {must: [obj, {term: {}}]}};
-        obj.bool.must[1].term[yy.fieldsMap[exp].portField] = port;
+        obj.bool.must[1].term[expInfo.portField] = port;
       } else {
         throw exp + " doesn't support port";
       }
@@ -280,11 +301,10 @@ function stripQuotes (str) {
 
 function formatExists(yy, field, op)
 {
-  if (!yy.fieldsMap[field])
+  var info = getFieldInfo(yy, field);
+  if (!info)
     throw "Unknown field " + field;
 
-  var info = yy.fieldsMap[field];
-
   if (info.requiredRight && yy[info.requiredRight] !== true) {
     throw field + " - permission denied";
   }
@@ -325,11 +345,10 @@ function formatQuery(yy, field, op, value)
     checkRegex(value);
   }
 
-  if (!yy.fieldsMap[field])
+  var info = getFieldInfo(yy, field);
+  if (!info)
     throw "Unknown field " + field;
 
-  var info = yy.fieldsMap[field];
-
   if (info.requiredRight && yy[info.requiredRight] !== true) {
     throw field + " - permission denied";
   }
@@ -573,7 +592,7 @@ function checkRegex(str) {
 }
 
 function field2Raw(yy, field) {
-  var info = yy.fieldsMap[field];
+  var info = getFieldInfo(yy, field);
   var dbField = info.dbField;
   if (info.rawField)
     return info.rawField;
@@ -586,10 +605,9 @@ function field2Raw(yy, field) {
 
 function stringQuery(yy, field, str) {
 
-  var info = yy.fieldsMap[field];
+  var info = getFieldInfo(yy, field);
   var dbField = info.dbField;
 
-
   if (str[0] === "/" && str[str.length -1] === "/") {
     checkRegex(str);
 
diff --git a/viewer/molochparser.js b/viewer/molochparser.js
index 5b8e4912..8793b163 100644
--- a/viewer/molochparser.js
+++ b/viewer/molochparser.js
@@ -84,7 +84,7 @@ performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* actio
 var $0 = $$.length - 1;
 switch (yystate) {
 case 1:
- return $$[$0-1]; 
+ return $$[$0-1];
 break;
 case 2:
 this.$ = 'lt'
@@ -128,7 +128,7 @@ break;
 case 19:
  this.$ = formatQuery(yy, $$[$0-2], $$[$0-1], $$[$0]);
           //console.log(util.inspect(this.$, false, 50));
-        
+
 break;
 }
 },
@@ -285,6 +285,26 @@ parse: function parse(input) {
 var    util           = require('util');
 var    moment         = require('moment');
 
+/* Given a field name, if prefixed with 'db:' return dbFieldsMap entry (i.e., looked up according to
+ * the Elasticsearch field name); otherwise return fieldsMap entry (see #1461)
+ */
+function getFieldInfo(yy, field)
+{
+  var info = null;
+
+  if (field.startsWith('db:')) {
+    var dbField = field.substring(3);
+    if (yy.dbFieldsMap[dbField]) {
+      info = yy.dbFieldsMap[dbField];
+    }
+  } else if (yy.fieldsMap[field]) {
+    info = yy.fieldsMap[field];
+  }
+
+  // console.log('getFieldInfo', field, info);
+  return info;
+}
+
 /* Build a list of all the field infos for ip field types.
  * Can specify if a port field needs to be available for the type or not
  */
@@ -331,7 +351,7 @@ function getIpInfoList(yy, needPort)
  * Arrays of all of the above
  */
 function parseIpPort(yy, field, ipPortStr) {
-  var dbField = yy.fieldsMap[field].dbField;
+  var dbField = getFieldInfo(yy, field).dbField;
 
   // Have just a single Ip, create obj for it
   function singleIp(exp, dbField, ip, port) {
@@ -354,9 +374,10 @@ function parseIpPort(yy, field, ipPortStr) {
     }
 
     if (port !== -1) {
-      if (yy.fieldsMap[exp].portField) {
+      var expInfo = getFieldInfo(yy, exp);
+      if (expInfo.portField) {
         obj = {bool: {must: [obj, {term: {}}]}};
-        obj.bool.must[1].term[yy.fieldsMap[exp].portField] = port;
+        obj.bool.must[1].term[expInfo.portField] = port;
       } else {
         throw exp + " doesn't support port";
       }
@@ -479,11 +500,10 @@ function stripQuotes (str) {
 
 function formatExists(yy, field, op)
 {
-  if (!yy.fieldsMap[field])
+  var info = getFieldInfo(yy, field);
+  if (!info)
     throw "Unknown field " + field;
 
-  var info = yy.fieldsMap[field];
-
   if (info.requiredRight && yy[info.requiredRight] !== true) {
     throw field + " - permission denied";
   }
@@ -524,11 +544,10 @@ function formatQuery(yy, field, op, value)
     checkRegex(value);
   }
 
-  if (!yy.fieldsMap[field])
+  var info = getFieldInfo(yy, field);
+  if (!info)
     throw "Unknown field " + field;
 
-  var info = yy.fieldsMap[field];
-
   if (info.requiredRight && yy[info.requiredRight] !== true) {
     throw field + " - permission denied";
   }
@@ -772,7 +791,7 @@ function checkRegex(str) {
 }
 
 function field2Raw(yy, field) {
-  var info = yy.fieldsMap[field];
+  var info = getFieldInfo(yy, field);
   var dbField = info.dbField;
   if (info.rawField)
     return info.rawField;
@@ -785,10 +804,9 @@ function field2Raw(yy, field) {
 
 function stringQuery(yy, field, str) {
 
-  var info = yy.fieldsMap[field];
+  var info = getFieldInfo(yy, field);
   var dbField = info.dbField;
 
-
   if (str[0] === "/" && str[str.length -1] === "/") {
     checkRegex(str);
 
diff --git a/viewer/viewer.js b/viewer/viewer.js
index ce2ae3bd..c9a60d82 100644
--- a/viewer/viewer.js
+++ b/viewer/viewer.js
@@ -3026,6 +3026,7 @@ function buildSessionQuery (req, buildCb, queryOverride = null) {
   molochparser.parser.yy = {
     views: req.user.views,
     fieldsMap: Config.getFieldsMap(),
+    dbFieldsMap: Config.getDBFieldsMap(),
     prefix: internals.prefix,
     emailSearch: req.user.emailSearch === true,
     lookups: req.lookups,
@@ -9212,6 +9213,7 @@ function processCronQueries () {
             molochparser.parser.yy = {
               emailSearch: user.emailSearch === true,
               fieldsMap: Config.getFieldsMap(),
+              dbFieldsMap: Config.getDBFieldsMap(),
               prefix: internals.prefix,
               lookups: lookups,
               lookupTypeMap: internals.lookupTypeMap
