filter {

  # set data types for fields that belong to various zeek logs
  mutate {
    id => "mutate_convert_zeek_bulk"
    convert => {
      "[zeek_conn][duration]" => "float"
      "[zeek_dce_rpc][rtt]" => "float"
      "[zeek_dhcp][duration]" => "float"
      "[zeek_dns][rtt]" => "float"
      "[zeek_ldap][result_code]" => "integer"
      "[zeek_modbus_register][delta]" => "float"
      "[zeek_modbus_register][new_val]" => "integer"
      "[zeek_modbus_register][old_val]" => "integer"
      "[zeek_modbus_register][register]" => "integer"
      "[zeek_mqtt_publish][payload_len]" => "integer"
      "[zeek_mqtt_subscribe][granted_qos_level]" => "integer"
      "[zeek_mqtt_subscribe][qos_levels]" => "integer"
      "[zeek_ntp][num_exts]" => "integer"
      "[zeek_ntp][poll]" => "float"
      "[zeek_ntp][precision]" => "float"
      "[zeek_ntp][root_delay]" => "float"
      "[zeek_ntp][root_disp]" => "float"
      "[zeek_ntp][version]" => "integer"
      "[zeek_s7comm][item_count]" => "integer"
      "[zeek_signatures][host_count]" => "integer"
      "[zeek_signatures][signature_count]" => "integer"
      "[zeek_smb_cmd][rtt]" => "float"
      "[zeek_smb_files][data_len_req]" => "integer"
      "[zeek_smb_files][data_len_rsp]" => "integer"
      "[zeek_smb_files][data_offset_req]" => "integer"
    }
  }

  # convert all zeek "time" types (minus zeek.ts, which was done earlier)
  # https://docs.zeek.org/en/current/script-reference/types.html#type-time

  if ([zeek_kerberos][from]) {
    if ([zeek_kerberos][from] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_kerberos_from_zero"
               remove_field => [ "[zeek_kerberos][from]" ] }
    } else {
      date {
        id => "date_zeek_kerberos_from"
        match => [ "[zeek_kerberos][from]", "UNIX" ]
        target => "[zeek_kerberos][from]"
      }
    }
  }

  if ([zeek_kerberos][till]) {
    if ([zeek_kerberos][till] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_kerberos_till_zero"
               remove_field => [ "[zeek_kerberos][till]" ] }
    } else {
      date {
        id => "date_zeek_kerberos_till"
        match => [ "[zeek_kerberos][till]", "UNIX" ]
        target => "[zeek_kerberos][till]"
      }
    }
  }

  if ([zeek_ntp][org_time]) {
    if ([zeek_ntp][org_time] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_ntp_org_time_zero"
               remove_field => [ "[zeek_ntp][org_time]" ] }
    } else {
      date {
        id => "date_zeek_ntp_org_time"
        match => [ "[zeek_ntp][org_time]", "UNIX" ]
        target => "[zeek_ntp][org_time]"
      }
    }
  }

  if ([zeek_ntp][rec_time]) {
    if ([zeek_ntp][rec_time] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_ntp_rec_time_zero"
               remove_field => [ "[zeek_ntp][rec_time]" ] }
    } else {
      date {
        id => "date_zeek_ntp_rec_time"
        match => [ "[zeek_ntp][rec_time]", "UNIX" ]
        target => "[zeek_ntp][rec_time]"
      }
    }
  }

  if ([zeek_ntp][ref_time]) {
    if ([zeek_ntp][ref_time] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_ntp_ref_time_zero"
               remove_field => [ "[zeek_ntp][ref_time]" ] }
    } else {
      date {
        id => "date_zeek_ntp_ref_time"
        match => [ "[zeek_ntp][ref_time]", "UNIX" ]
        target => "[zeek_ntp][ref_time]"
      }
    }
  }

  if ([zeek_ntp][xmt_time]) {
    if ([zeek_ntp][xmt_time] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_ntp_xmt_time_zero"
               remove_field => [ "[zeek_ntp][xmt_time]" ] }
    } else {
      date {
        id => "date_zeek_ntp_xmt_time"
        match => [ "[zeek_ntp][xmt_time]", "UNIX" ]
        target => "[zeek_ntp][xmt_time]"
      }
    }
  }

  if ([zeek_pe][compile_ts]) {
    if ([zeek_pe][compile_ts] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_pe_compile_ts_zero"
               remove_field => [ "[zeek_pe][compile_ts]" ] }
    } else {
      date {
        id => "date_zeek_pe_compile_ts"
        match => [ "[zeek_pe][compile_ts]", "UNIX" ]
        target => "[zeek_pe][compile_ts]"
      }
    }
  }

  if ([zeek_smb_files][times_accessed]) {
    if ([zeek_smb_files][times_accessed] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_smb_files_times_accessed_zero"
               remove_field => [ "[zeek_smb_files][times_accessed]" ] }
    } else {
      date {
        id => "date_zeek_smb_files_times_accessed"
        match => [ "[zeek_smb_files][times_accessed]", "UNIX" ]
        target => "[zeek_smb_files][times_accessed]"
      }
    }
  }

  if ([zeek_smb_files][times_changed]) {
    if ([zeek_smb_files][times_changed] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_smb_files_times_changed_zero"
               remove_field => [ "[zeek_smb_files][times_changed]" ] }
    } else {
      date {
        id => "date_zeek_smb_files_times_changed"
        match => [ "[zeek_smb_files][times_changed]", "UNIX" ]
        target => "[zeek_smb_files][times_changed]"
      }
    }
  }

  if ([zeek_smb_files][times_created]) {
    if ([zeek_smb_files][times_created] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_smb_files_times_created_zero"
               remove_field => [ "[zeek_smb_files][times_created]" ] }
    } else {
      date {
        id => "date_zeek_smb_files_times_created"
        match => [ "[zeek_smb_files][times_created]", "UNIX" ]
        target => "[zeek_smb_files][times_created]"
      }
    }
  }

  if ([zeek_smb_files][times_modified]) {
    if ([zeek_smb_files][times_modified] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_smb_files_times_modified_zero"
               remove_field => [ "[zeek_smb_files][times_modified]" ] }
    } else {
      date {
        id => "date_zeek_smb_files_times_modified"
        match => [ "[zeek_smb_files][times_modified]", "UNIX" ]
        target => "[zeek_smb_files][times_modified]"
      }
    }
  }

  if ([zeek_smb_files][ts]) {
    if ([zeek_smb_files][ts] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_smb_files_ts_zero"
               remove_field => [ "[zeek_smb_files][ts]" ] }
    } else {
      date {
        id => "date_zeek_smb_files_ts"
        match => [ "[zeek_smb_files][ts]", "UNIX" ]
        target => "[zeek_smb_files][ts]"
      }
    }
  }

  if ([zeek_snmp][up_since]) {
    if ([zeek_snmp][up_since] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_snmp_up_since_zero"
               remove_field => [ "[zeek_snmp][up_since]" ] }
    } else {
      date {
        id => "date_zeek_snmp_up_since"
        match => [ "[zeek_snmp][up_since]", "UNIX" ]
        target => "[zeek_snmp][up_since]"
      }
    }
  }

  if ([zeek_x509][certificate_not_valid_after]) {
    if ([zeek_x509][certificate_not_valid_after] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_x509_certificate_not_valid_after_zero"
               remove_field => [ "[zeek_x509][certificate_not_valid_after]" ] }
    } else {
      date {
        id => "date_zeek_x509_certificate_not_valid_after"
        match => [ "[zeek_x509][certificate_not_valid_after]", "UNIX" ]
        target => "[zeek_x509][certificate_not_valid_after]"
      }
    }
  }

  if ([zeek_x509][certificate_not_valid_before]) {
    if ([zeek_x509][certificate_not_valid_before] == "0.000000") {
      mutate { id => "mutate_remove_field_zeek_x509_certificate_not_valid_before_zero"
               remove_field => [ "[zeek_x509][certificate_not_valid_before]" ] }
    } else {
      date {
        id => "date_zeek_x509_certificate_not_valid_before"
        match => [ "[zeek_x509][certificate_not_valid_before]", "UNIX" ]
        target => "[zeek_x509][certificate_not_valid_before]"
      }
    }
  }

}